$OpenBSD$

Revert the file patch to ESR45.1.1, all changes were TB-specific and not
relevant under OpenBSD
--- toolkit/xre/nsUpdateDriver.cpp.orig	Wed Jun 15 20:59:41 2016
+++ toolkit/xre/nsUpdateDriver.cpp	Wed Jun 15 20:59:51 2016
@@ -168,16 +168,6 @@ GetInstallDirPath(nsIFile *appDir, nsACString& install
   return NS_OK;
 }
 
-#ifdef DEBUG
-static void
-dump_argv(const char *aPrefix, char **argv, int argc)
-{
-  printf("%s - %d args\n", aPrefix, argc);
-  for (int i = 0; i < argc; ++i)
-    printf("  %d: %s\n", i, argv[i]);
-}
-#endif
-
 #if defined(XP_MACOSX)
 // This is a copy of OS X's XRE_GetBinaryPath from nsAppRunner.cpp with the
 // gBinaryPath check removed so that the updater can reload the stub executable
@@ -265,33 +255,6 @@ typedef enum {
   eAppliedService
 } UpdateStatus;
 
-#ifdef DEBUG
-static const char *
-UpdateStatusToString(UpdateStatus aStatus)
-{
-  const char *rv = "unknown";
-  switch (aStatus) {
-    case eNoUpdateAction:
-      rv = "NoUpdateAction";
-      break;
-    case ePendingUpdate:
-      rv = "PendingUpdate";
-      break;
-    case ePendingService:
-      rv = "PendingService";
-      break;
-    case eAppliedUpdate:
-      rv = "AppliedUpdate";
-      break;
-    case eAppliedService:
-      rv = "AppliedService";
-      break;
-  }
-
-  return rv;
-}
-#endif
-
 /**
  * Returns a value indicating what needs to be done in order to handle an update.
  *
@@ -360,44 +323,12 @@ IsOlderVersion(nsIFile *versionFile, const char *appVe
   if (strncmp(buf, kNull, sizeof(kNull) - 1) == 0)
     return false;
 
-#ifdef DEBUG
-  printf("IsOlderVersion checking appVersion %s against updateVersion %s\n",
-         appVersion, buf);
-#endif
-
   if (mozilla::Version(appVersion) > buf)
     return true;
 
   return false;
 }
 
-#ifndef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-#if defined(TOR_BROWSER_UPDATE) && defined(XP_MACOSX)
-static nsresult
-GetUpdateDirFromAppDir(nsIFile *aAppDir, nsIFile* *aResult)
-{
-  // On Mac OSX, we stage the update to an Updated.app directory that is
-  // directly below the main Tor Browser.app directory (two levels up from
-  // the appDir).
-  NS_ENSURE_ARG_POINTER(aAppDir);
-  NS_ENSURE_ARG_POINTER(aResult);
-  nsCOMPtr<nsIFile> parentDir1, parentDir2;
-  nsresult rv = aAppDir->GetParent(getter_AddRefs(parentDir1));
-  NS_ENSURE_SUCCESS(rv, rv);
-  rv = parentDir1->GetParent(getter_AddRefs(parentDir2));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsCOMPtr<nsIFile> updatedDir;
-  if (!GetFile(parentDir2, NS_LITERAL_CSTRING("Updated.app"), updatedDir)) {
-    return NS_ERROR_FAILURE;
-  }
-
-  updatedDir.forget(aResult);
-  return NS_OK;
-}
-#endif
-#endif
-
 static bool
 CopyFileIntoUpdateDir(nsIFile *parentDir, const nsACString& leaf, nsIFile *updateDir)
 {
@@ -469,39 +400,30 @@ CopyUpdaterIntoUpdateDir(nsIFile *greDir, nsIFile *app
  * Appends the specified path to the library path.
  * This is used so that updater can find libmozsqlite3.so and other shared libs.
  *
- * @param pathToAppend A new library path to prepend to the dynamic linker's search path.
+ * @param pathToAppend A new library path to prepend to LD_LIBRARY_PATH
  */
-#if defined(MOZ_VERIFY_MAR_SIGNATURE) && (defined(MAR_NSS) || \
-    (!defined(XP_WIN) && !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GONK)))
+#if defined(MOZ_VERIFY_MAR_SIGNATURE) && !defined(XP_WIN) && \
+    !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GONK)
 #include "prprf.h"
-#if defined(XP_WIN)
-#define PATH_SEPARATOR ";"
-#define LD_LIBRARY_PATH_ENVVAR_NAME "PATH"
-#else
 #define PATH_SEPARATOR ":"
-#if defined(XP_MACOSX)
-#define LD_LIBRARY_PATH_ENVVAR_NAME "DYLD_LIBRARY_PATH"
-#else
 #define LD_LIBRARY_PATH_ENVVAR_NAME "LD_LIBRARY_PATH"
-#endif
-#endif
 static void
 AppendToLibPath(const char *pathToAppend)
 {
-  char *s = nullptr;
   char *pathValue = getenv(LD_LIBRARY_PATH_ENVVAR_NAME);
   if (nullptr == pathValue || '\0' == *pathValue) {
-    s = PR_smprintf("%s=%s", LD_LIBRARY_PATH_ENVVAR_NAME, pathToAppend);
-  } else {
-    s = PR_smprintf("%s=%s" PATH_SEPARATOR "%s",
+    char *s = PR_smprintf("%s=%s", LD_LIBRARY_PATH_ENVVAR_NAME, pathToAppend);
+    PR_SetEnv(s);
+  } else if (!strstr(pathValue, pathToAppend)) {
+    char *s = PR_smprintf("%s=%s" PATH_SEPARATOR "%s",
                     LD_LIBRARY_PATH_ENVVAR_NAME, pathToAppend, pathValue);
+    PR_SetEnv(s);
   }
 
   // The memory used by PR_SetEnv is not copied to the environment on all
   // platform, it can be used by reference directly. So we purposely do not
   // call PR_smprintf_free on s.  Subsequent calls to PR_SetEnv will free
   // the old memory first.
-  PR_SetEnv(s);
 }
 #endif
 
@@ -619,12 +541,7 @@ SwitchToUpdatedApp(nsIFile *greDir, nsIFile *updateDir
   nsAutoCString applyToDir;
   nsCOMPtr<nsIFile> updatedDir;
 #ifdef XP_MACOSX
-#if defined(TOR_BROWSER_UPDATE) && !defined(TOR_BROWSER_DATA_OUTSIDE_APP_DIR)
-  rv = GetUpdateDirFromAppDir(appDir, getter_AddRefs(updatedDir));
-  if (NS_FAILED(rv)) {
-#else
   if (!GetFile(updateDir, NS_LITERAL_CSTRING("Updated.app"), updatedDir)) {
-#endif
 #else
   if (!GetFile(appDir, NS_LITERAL_CSTRING("updated"), updatedDir)) {
 #endif
@@ -710,21 +627,10 @@ SwitchToUpdatedApp(nsIFile *greDir, nsIFile *updateDir
   if (gSafeMode) {
     PR_SetEnv("MOZ_SAFE_MODE_RESTART=1");
   }
-
-#if defined(MOZ_VERIFY_MAR_SIGNATURE) && (defined(MAR_NSS) || \
-    (!defined(XP_WIN) && !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GONK)))
-#ifdef TOR_BROWSER_UPDATE
-  nsAutoCString appPath;
-  nsresult rv2 = appDir->GetNativePath(appPath);
-  if (NS_SUCCEEDED(rv2)) {
-    AppendToLibPath(appPath.get());
-  } else {
-    LOG(("SwitchToUpdatedApp -- appDir->GetNativePath() failed (0x%x)\n", rv2));
-  }
-#else
+#if defined(MOZ_VERIFY_MAR_SIGNATURE) && !defined(XP_WIN) && \
+    !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GONK)
   AppendToLibPath(installDirPath.get());
 #endif
-#endif
 
   LOG(("spawning updater process for replacing [%s]\n", updaterPath.get()));
 
@@ -901,12 +807,7 @@ ApplyUpdate(nsIFile *greDir, nsIFile *updateDir, nsIFi
     applyToDir.Assign(installDirPath);
   } else {
 #ifdef XP_MACOSX
-#if defined(TOR_BROWSER_UPDATE) && !defined(TOR_BROWSER_DATA_OUTSIDE_APP_DIR)
-    rv = GetUpdateDirFromAppDir(appDir, getter_AddRefs(updatedDir));
-    if (NS_FAILED(rv)) {
-#else
     if (!GetFile(updateDir, NS_LITERAL_CSTRING("Updated.app"), updatedDir)) {
-#endif
 #else
     if (!GetFile(appDir, NS_LITERAL_CSTRING("updated"), updatedDir)) {
 #endif
@@ -1002,25 +903,14 @@ ApplyUpdate(nsIFile *greDir, nsIFile *updateDir, nsIFi
   if (gSafeMode) {
     PR_SetEnv("MOZ_SAFE_MODE_RESTART=1");
   }
-#if defined(MOZ_VERIFY_MAR_SIGNATURE) && (defined(MAR_NSS) || \
-    (!defined(XP_WIN) && !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GONK)))
-#ifdef TOR_BROWSER_UPDATE
-  nsAutoCString appPath;
-  nsresult rv2 = appDir->GetNativePath(appPath);
-  if (NS_SUCCEEDED(rv2)) {
-    AppendToLibPath(appPath.get());
-  } else {
-    LOG(("ApplyUpdate -- appDir->GetNativePath() failed (0x%x)\n", rv2));
-  }
-#else
+#if defined(MOZ_VERIFY_MAR_SIGNATURE) && !defined(XP_WIN) && \
+    !defined(XP_MACOSX) && !defined(MOZ_WIDGET_GONK)
   AppendToLibPath(installDirPath.get());
 #endif
-#endif
 
   if (isOSUpdate) {
     PR_SetEnv("MOZ_OS_UPDATE=1");
   }
-
 #if defined(MOZ_WIDGET_GONK)
   // We want the updater to be CPU friendly and not subject to being killed by
   // the low memory killer, so we pass in some preferences to allow it to
@@ -1043,9 +933,6 @@ ApplyUpdate(nsIFile *greDir, nsIFile *updateDir, nsIFi
 #endif
 
   LOG(("spawning updater process [%s]\n", updaterPath.get()));
-#ifdef DEBUG
-  dump_argv("ApplyUpdate updater", argv, argc);
-#endif
 
 #if defined(USE_EXECV)
   // Don't use execv when staging updates.
@@ -1069,9 +956,6 @@ ApplyUpdate(nsIFile *greDir, nsIFile *updateDir, nsIFi
   // LaunchChildMac uses posix_spawnp and prefers the current
   // architecture when launching. It doesn't require a
   // null-terminated string but it doesn't matter if we pass one.
-#ifdef DEBUG
-  dump_argv("ApplyUpdate after SetupMacCommandLine", argv, argc);
-#endif
   LaunchChildMac(argc, argv, 0, outpid);
   if (restart) {
     exit(0);
@@ -1110,29 +994,9 @@ ProcessUpdates(nsIFile *greDir, nsIFile *appDir, nsIFi
                bool restart, bool isOSUpdate, nsIFile *osApplyToDir,
                ProcessType *pid)
 {
-#if defined(XP_WIN) && defined(TOR_BROWSER_UPDATE)
-  // Try to remove the "tobedeleted" directory which, if present, contains
-  // files that could not be removed during a previous update (e.g., DLLs
-  // that were in use and therefore locked by Windows).
-  nsCOMPtr<nsIFile> deleteDir;
-  nsresult winrv = appDir->Clone(getter_AddRefs(deleteDir));
-  if (NS_SUCCEEDED(winrv)) {
-    winrv = deleteDir->AppendNative(NS_LITERAL_CSTRING("tobedeleted"));
-    if (NS_SUCCEEDED(winrv)) {
-      winrv = deleteDir->Remove(true);
-    }
-  }
-#endif
-
   nsresult rv;
 
   nsCOMPtr<nsIFile> updatesDir;
-#ifdef DEBUG
-  nsAutoCString path;
-  updRootDir->GetNativePath(path);
-  printf("ProcessUpdates updateRootDir: %s appVersion: %s\n",
-         path.get(), appVersion);
-#endif
   rv = updRootDir->Clone(getter_AddRefs(updatesDir));
   if (NS_FAILED(rv))
     return rv;
@@ -1158,12 +1022,6 @@ ProcessUpdates(nsIFile *greDir, nsIFile *appDir, nsIFi
 
   nsCOMPtr<nsIFile> statusFile;
   UpdateStatus status = GetUpdateStatus(updatesDir, statusFile);
-#ifdef DEBUG
-  printf("ProcessUpdates status: %s (%d)\n",
-         UpdateStatusToString(status), status);
-  updatesDir->GetNativePath(path);
-  printf("ProcessUpdates updatesDir: %s\n", path.get());
-#endif
   switch (status) {
   case ePendingUpdate:
   case ePendingService: {
@@ -1246,11 +1104,7 @@ nsUpdateProcessor::ProcessUpdate(nsIUpdate* aUpdate)
     if (NS_FAILED(rv))
       appDir = dirProvider->GetAppDir();
 
-#ifdef TOR_BROWSER_UPDATE
-    appVersion = TOR_BROWSER_VERSION;
-#else
     appVersion = gAppData->version;
-#endif
     argc = gRestartArgc;
     argv = gRestartArgv;
   } else {
@@ -1280,8 +1134,6 @@ nsUpdateProcessor::ProcessUpdate(nsIUpdate* aUpdate)
                  getter_AddRefs(updRoot));
     NS_ASSERTION(NS_SUCCEEDED(rv), "Can't get the UpdRootD dir");
 
-    // To support Tor Browser updates from xpcshell, modify the following
-    // code to use TOR_BROWSER_VERSION from the configure process.
     nsCOMPtr<nsIXULAppInfo> appInfo =
       do_GetService("@mozilla.org/xre/app-info;1");
     if (appInfo) {
