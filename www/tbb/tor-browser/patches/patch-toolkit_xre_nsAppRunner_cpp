$OpenBSD$

Revert the file back to ESR45.1.1, all diffs were TB-specific and not
relevant to OpenBSD
--- toolkit/xre/nsAppRunner.cpp.orig	Wed Jun 15 20:45:20 2016
+++ toolkit/xre/nsAppRunner.cpp	Wed Jun 15 20:45:31 2016
@@ -145,7 +145,6 @@
 #include "mozilla/LateWriteChecks.h"
 
 #include <stdlib.h>
-#include <locale.h>
 
 #ifdef XP_UNIX
 #include <sys/stat.h>
@@ -1690,8 +1689,7 @@ DumpHelp()
          "  --profile <path>   Start with profile at <path>.\n"
          "  --migration        Start with migration wizard.\n"
          "  --ProfileManager   Start with ProfileManager.\n"
-         "  --no-remote        (default) Do not accept or send remote commands; implies --new-instance.\n"
-         "  --allow-remote     Accept and send remote commands.\n"
+         "  --no-remote        Do not accept or send remote commands; implies --new-instance.\n"
          "  --new-instance     Open new instance, not a new window in running instance.\n"
          "  --UILocale <locale> Start with <locale> resources as UI Locale.\n"
          "  --safe-mode        Disables extensions and themes for this session.\n", gAppData->name);
@@ -1915,135 +1913,6 @@ static nsresult LaunchChild(nsINativeAppSupport* aNati
   return NS_ERROR_LAUNCHED_CHILD_PROCESS;
 }
 
-static nsresult
-GetOverrideStringBundleForLocale(nsIStringBundleService* aSBS,
-                                 const char* aTorbuttonURI, const char* aLocale,
-                                 nsIStringBundle* *aResult)
-{
-  NS_ENSURE_ARG(aSBS);
-  NS_ENSURE_ARG(aTorbuttonURI);
-  NS_ENSURE_ARG(aLocale);
-  NS_ENSURE_ARG(aResult);
-
-  const char* kFormatStr = "jar:%s!/chrome/locale/%s/torbutton.properties";
-  nsPrintfCString strBundleURL(kFormatStr, aTorbuttonURI, aLocale);
-  nsresult rv = aSBS->CreateBundle(strBundleURL.get(), aResult);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // To ensure that we have a valid string bundle, try to retrieve a string
-  // that we know exists.
-  nsXPIDLString val;
-  rv = (*aResult)->GetStringFromName(MOZ_UTF16("profileProblemTitle"),
-                                     getter_Copies(val));
-  if (!NS_SUCCEEDED(rv))
-    *aResult = nullptr;  // No good.  Discard it.
-
-  return rv;
-}
-
-static void
-GetOverrideStringBundle(nsIStringBundleService* aSBS, nsIStringBundle* *aResult)
-{
-  if (!aSBS || !aResult)
-    return;
-
-  *aResult = nullptr;
-
-  nsXREDirProvider* dirProvider = nsXREDirProvider::GetSingleton();
-  if (!dirProvider)
-    return;
-
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-  // Build Torbutton file URI by starting from the distribution directory.
-  bool persistent = false; // ignored
-  nsCOMPtr<nsIFile> distribDir;
-  nsresult rv = dirProvider->GetFile(XRE_APP_DISTRIBUTION_DIR, &persistent,
-                                     getter_AddRefs(distribDir));
-  if (NS_FAILED(rv))
-    return;
-
-  // Create file URI, extract as string, and append Torbutton xpi relative path.
-  nsCOMPtr<nsIURI> uri;
-  nsAutoCString uriString;
-  if (NS_FAILED(NS_NewFileURI(getter_AddRefs(uri), distribDir)) ||
-      NS_FAILED(uri->GetSpec(uriString))) {
-    return;
-  }
-
-  uriString.Append("extensions/torbutton@torproject.org.xpi");
-#else
-  // Build Torbutton file URI string by starting from the profiles directory.
-  bool persistent = false; // ignored
-  nsCOMPtr<nsIFile> profilesDir;
-  nsresult rv = dirProvider->GetFile(NS_APP_USER_PROFILES_ROOT_DIR, &persistent,
-                                     getter_AddRefs(profilesDir));
-  if (NS_FAILED(rv))
-    return;
-
-  // Create file URI, extract as string, and append Torbutton xpi relative path.
-  nsCOMPtr<nsIURI> uri;
-  nsAutoCString uriString;
-  if (NS_FAILED(NS_NewFileURI(getter_AddRefs(uri), profilesDir)) ||
-      NS_FAILED(uri->GetSpec(uriString))) {
-    return;
-  }
-
-  uriString.Append("profile.default/extensions/torbutton@torproject.org.xpi");
-#endif
-
-  nsCString userAgentLocale;
-  if (!NS_SUCCEEDED(Preferences::GetCString("general.useragent.locale",
-                                            &userAgentLocale))) {
-    return;
-  }
-
-  rv = GetOverrideStringBundleForLocale(aSBS, uriString.get(),
-                                   userAgentLocale.get(), aResult);
-  if (NS_FAILED(rv)) {
-    // Try again using base locale, e.g., "en" vs. "en-US".
-    int16_t offset = userAgentLocale.FindChar('-', 1);
-    if (offset > 0) {
-      nsAutoCString shortLocale(Substring(userAgentLocale, 0, offset));
-      rv = GetOverrideStringBundleForLocale(aSBS, uriString.get(),
-                                       shortLocale.get(), aResult);
-    }
-  }
-}
-
-static nsresult
-GetFormattedString(nsIStringBundle* aOverrideBundle,
-                   nsIStringBundle* aMainBundle,
-                   const char16_t* aName,
-                   const char16_t** aParams, uint32_t aLength,
-                   char16_t* *aResult)
-{
-  NS_ENSURE_ARG(aName);
-  NS_ENSURE_ARG(aResult);
-
-  nsresult rv = NS_ERROR_FAILURE;
-  if (aOverrideBundle) {
-    rv = aOverrideBundle->FormatStringFromName(aName, aParams, aLength,
-                                               aResult);
-  }
-
-  // If string was not found in override bundle, use main (browser) bundle.
-  if (NS_FAILED(rv) && aMainBundle)
-    rv = aMainBundle->FormatStringFromName(aName, aParams, aLength, aResult);
-
-  return rv;
-}
-
-enum ProfileStatus {
-  PROFILE_STATUS_OK,
-  PROFILE_STATUS_ACCESS_DENIED,
-  PROFILE_STATUS_READ_ONLY,
-  PROFILE_STATUS_IS_LOCKED,
-  PROFILE_STATUS_OTHER_ERROR
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-  , PROFILE_STATUS_MIGRATION_FAILED
-#endif
-};
-
 static const char kProfileProperties[] =
   "chrome://mozapps/locale/profile/profileSelection.properties";
 
@@ -2081,12 +1950,10 @@ class ReturnAbortOnError (private)
 
 } // namespace
 
-// If aUnlocker is NULL, it is also OK for the following arguments to be NULL:
-//   aProfileDir, aProfileLocalDir, aResult.
 static ReturnAbortOnError
-ProfileErrorDialog(nsIFile* aProfileDir, nsIFile* aProfileLocalDir,
-                   ProfileStatus aStatus, nsIProfileUnlocker* aUnlocker,
-                   nsINativeAppSupport* aNative, nsIProfileLock* *aResult)
+ProfileLockedDialog(nsIFile* aProfileDir, nsIFile* aProfileLocalDir,
+                    nsIProfileUnlocker* aUnlocker,
+                    nsINativeAppSupport* aNative, nsIProfileLock* *aResult)
 {
   nsresult rv;
 
@@ -2094,8 +1961,7 @@ ProfileErrorDialog(nsIFile* aProfileDir, nsIFile* aPro
   rv = xpcom.Initialize();
   NS_ENSURE_SUCCESS(rv, rv);
 
-  if (aProfileDir)
-    mozilla::Telemetry::WriteFailedProfileLock(aProfileDir);
+  mozilla::Telemetry::WriteFailedProfileLock(aProfileDir);
 
   rv = xpcom.SetWindowCreator(aNative);
   NS_ENSURE_SUCCESS(rv, NS_ERROR_FAILURE);
@@ -2109,47 +1975,23 @@ ProfileErrorDialog(nsIFile* aProfileDir, nsIFile* aPro
     sbs->CreateBundle(kProfileProperties, getter_AddRefs(sb));
     NS_ENSURE_TRUE_LOG(sbs, NS_ERROR_FAILURE);
 
-    nsCOMPtr<nsIStringBundle> overrideSB;
-    GetOverrideStringBundle(sbs, getter_AddRefs(overrideSB));
-
-    NS_ConvertUTF8toUTF16 appName(MOZ_APP_DISPLAYNAME);
+    NS_ConvertUTF8toUTF16 appName(gAppData->name);
     const char16_t* params[] = {appName.get(), appName.get()};
 
     nsXPIDLString killMessage;
 #ifndef XP_MACOSX
-    static const char16_t kRestartUnlocker[] = MOZ_UTF16("restartMessageUnlocker");
-    static const char16_t kRestartNoUnlocker[] = MOZ_UTF16("restartMessageNoUnlocker");
-    static const char16_t kReadOnly[] = MOZ_UTF16("profileReadOnly");
+    sb->FormatStringFromName(aUnlocker ? MOZ_UTF16("restartMessageUnlocker")
+                                       : MOZ_UTF16("restartMessageNoUnlocker"),
+                             params, 2, getter_Copies(killMessage));
 #else
-    static const char16_t kRestartUnlocker[] = MOZ_UTF16("restartMessageUnlockerMac");
-    static const char16_t kRestartNoUnlocker[] = MOZ_UTF16("restartMessageNoUnlockerMac");
-    static const char16_t kReadOnly[] = MOZ_UTF16("profileReadOnlyMac");
+    sb->FormatStringFromName(aUnlocker ? MOZ_UTF16("restartMessageUnlockerMac")
+                                       : MOZ_UTF16("restartMessageNoUnlockerMac"),
+                             params, 2, getter_Copies(killMessage));
 #endif
-    static const char16_t kAccessDenied[] = MOZ_UTF16("profileAccessDenied");
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-    static const char16_t kMigrationFailed[] = MOZ_UTF16("profileMigrationFailed");
-#endif
- 
-    const char16_t* errorKey = aUnlocker ? kRestartUnlocker
-                                         : kRestartNoUnlocker;
-    const char16_t* titleKey = MOZ_UTF16("profileProblemTitle");
-    if (PROFILE_STATUS_READ_ONLY == aStatus)
-      errorKey = kReadOnly;
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-    else if (PROFILE_STATUS_MIGRATION_FAILED == aStatus)
-      errorKey = kMigrationFailed;
-#endif
-    else if (PROFILE_STATUS_ACCESS_DENIED == aStatus)
-      errorKey = kAccessDenied;
-    else
-      titleKey = MOZ_UTF16("restartTitle");
 
-    GetFormattedString(overrideSB, sb, errorKey, params, 2,
-                       getter_Copies(killMessage));
-
     nsXPIDLString killTitle;
-    GetFormattedString(overrideSB, sb, titleKey, params, 1,
-                       getter_Copies(killTitle));
+    sb->FormatStringFromName(MOZ_UTF16("restartTitle"),
+                             params, 1, getter_Copies(killTitle));
 
     if (!killMessage || !killTitle)
       return NS_ERROR_FAILURE;
@@ -2190,8 +2032,7 @@ ProfileErrorDialog(nsIFile* aProfileDir, nsIFile* aPro
       }
     } else {
 #ifdef MOZ_WIDGET_ANDROID
-      if (aProfileDir && aProfileLocalDir && aResult &&
-          mozilla::widget::GeckoAppShell::UnlockProfile()) {
+      if (mozilla::widget::GeckoAppShell::UnlockProfile()) {
         return NS_LockProfilePath(aProfileDir, aProfileLocalDir, 
                                   nullptr, aResult);
       }
@@ -2226,7 +2067,7 @@ ProfileMissingDialog(nsINativeAppSupport* aNative)
     sbs->CreateBundle(kProfileProperties, getter_AddRefs(sb));
     NS_ENSURE_TRUE_LOG(sbs, NS_ERROR_FAILURE);
   
-    NS_ConvertUTF8toUTF16 appName(MOZ_APP_DISPLAYNAME);
+    NS_ConvertUTF8toUTF16 appName(gAppData->name);
     const char16_t* params[] = {appName.get(), appName.get()};
   
     nsXPIDLString missingMessage;
@@ -2251,9 +2092,8 @@ ProfileMissingDialog(nsINativeAppSupport* aNative)
 }
 
 static nsresult
-ProfileErrorDialog(nsIToolkitProfile* aProfile, ProfileStatus aStatus,
-                   nsIProfileUnlocker* aUnlocker, nsINativeAppSupport* aNative,
-                   nsIProfileLock* *aResult)
+ProfileLockedDialog(nsIToolkitProfile* aProfile, nsIProfileUnlocker* aUnlocker,
+                    nsINativeAppSupport* aNative, nsIProfileLock* *aResult)
 {
   nsCOMPtr<nsIFile> profileDir;
   nsresult rv = aProfile->GetRootDir(getter_AddRefs(profileDir));
@@ -2269,8 +2109,8 @@ ProfileErrorDialog(nsIToolkitProfile* aProfile, Profil
   rv = aProfile->GetLocalDir(getter_AddRefs(profileLocalDir));
   if (NS_FAILED(rv)) return rv;
 
-  return ProfileErrorDialog(profileDir, profileLocalDir, aStatus, aUnlocker,
-                            aNative, aResult);
+  return ProfileLockedDialog(profileDir, profileLocalDir, aUnlocker, aNative,
+                             aResult);
 }
 
 static const char kProfileManagerURL[] =
@@ -2435,270 +2275,6 @@ SetCurrentProfileAsDefault(nsIToolkitProfileService* a
   return rv;
 }
 
-// Check for write permission to the profile directory by trying to create a
-// new file (after ensuring that no file with the same name exists).
-static ProfileStatus CheckProfileWriteAccess(nsIFile* aProfileDir)
-{
-#if defined(XP_UNIX)
-  NS_NAMED_LITERAL_STRING(writeTestFileName, ".parentwritetest");
-#else
-  NS_NAMED_LITERAL_STRING(writeTestFileName, "parent.writetest");
-#endif
-
-  nsCOMPtr<nsIFile> writeTestFile;
-  nsresult rv = aProfileDir->Clone(getter_AddRefs(writeTestFile));
-  if (NS_SUCCEEDED(rv))
-    rv = writeTestFile->Append(writeTestFileName);
-
-  if (NS_SUCCEEDED(rv)) {
-    bool doesExist = false;
-    rv = writeTestFile->Exists(&doesExist);
-    if (NS_SUCCEEDED(rv) && doesExist)
-      rv = writeTestFile->Remove(true);
-  }
-
-  if (NS_SUCCEEDED(rv)) {
-    rv = writeTestFile->Create(nsIFile::NORMAL_FILE_TYPE, 0666);
-    (void)writeTestFile->Remove(true);
-  }
-
-  ProfileStatus status = NS_SUCCEEDED(rv) ? PROFILE_STATUS_OK
-                                          : PROFILE_STATUS_OTHER_ERROR;
-  if (NS_ERROR_FILE_ACCESS_DENIED == rv)
-    status = PROFILE_STATUS_ACCESS_DENIED;
-  else if (NS_ERROR_FILE_READ_ONLY == rv)
-    status = PROFILE_STATUS_READ_ONLY;
-
-  return status;
-}
-
-static ProfileStatus CheckProfileWriteAccess(nsIToolkitProfile* aProfile)
-{
-  nsCOMPtr<nsIFile> profileDir;
-  nsresult rv = aProfile->GetRootDir(getter_AddRefs(profileDir));
-  if (NS_FAILED(rv))
-    return PROFILE_STATUS_OTHER_ERROR;
-
-  return CheckProfileWriteAccess(profileDir);
-}
-
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-// Obtain an nsIFile for the app root directory, e.g., TorBrowser.app on
-// Mac OS and the directory that contains Browser/ on Linux and Windows.
-static nsresult GetAppRootDir(nsIFile *aAppDir, nsIFile **aAppRootDir)
-{
-  NS_ENSURE_ARG_POINTER(aAppDir);
-
-#ifdef XP_MACOSX
-  nsCOMPtr<nsIFile> tmpDir;
-  nsresult rv = aAppDir->GetParent(getter_AddRefs(tmpDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-  return tmpDir->GetParent(aAppRootDir);
-#else
-  return aAppDir->Clone(aAppRootDir);
-#endif
-}
-
-static ProfileStatus CheckTorBrowserDataWriteAccess(nsIFile *aAppDir)
-{
-  // Check whether we can write to the directory that will contain
-  // TorBrowser-Data.
-  nsCOMPtr<nsIFile> tbDataDir;
-  nsXREDirProvider* dirProvider = nsXREDirProvider::GetSingleton();
-  if (!dirProvider)
-    return PROFILE_STATUS_OTHER_ERROR;
-  nsresult rv =
-              dirProvider->GetTorBrowserUserDataDir(getter_AddRefs(tbDataDir));
-  NS_ENSURE_SUCCESS(rv, PROFILE_STATUS_OTHER_ERROR);
-  nsCOMPtr<nsIFile> tbDataDirParent;
-  rv = tbDataDir->GetParent(getter_AddRefs(tbDataDirParent));
-  NS_ENSURE_SUCCESS(rv, PROFILE_STATUS_OTHER_ERROR);
-  return CheckProfileWriteAccess(tbDataDirParent);
-}
-
-// Move the directory defined by combining aSrcParentDir and aSrcRelativePath
-// to the location defined by combining aDestParentDir and aDestRelativePath.
-// If the source directory does not exist, no changes are made and NS_OK is
-// returned.
-// If the destination directory exists, its contents are removed after the
-// source directory has been moved (if the move fails for some reason, the
-// original contents of the destination directory are restored).
-static nsresult
-migrateOneTorBrowserDataDir(nsIFile *aSrcParentDir,
-                            const nsACString &aSrcRelativePath,
-                            nsIFile *aDestParentDir,
-                            const nsACString &aDestRelativePath)
-{
-  NS_ENSURE_ARG_POINTER(aSrcParentDir);
-  NS_ENSURE_ARG_POINTER(aDestParentDir);
-
-  nsCOMPtr<nsIFile> srcDir;
-  nsresult rv = aSrcParentDir->Clone(getter_AddRefs(srcDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-  if (!aSrcRelativePath.IsEmpty()) {
-    rv = srcDir->AppendRelativeNativePath(aSrcRelativePath);
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-  bool srcDirExists = false;
-  srcDir->Exists(&srcDirExists);
-  if (!srcDirExists)
-    return NS_OK;   // Old data does not exist; skip migration.
-
-  nsCOMPtr<nsIFile> destDir;
-  rv = aDestParentDir->Clone(getter_AddRefs(destDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-  if (!aDestRelativePath.IsEmpty()) {
-    rv = destDir->AppendRelativeNativePath(aDestRelativePath);
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-  nsCOMPtr<nsIFile> destParentDir;
-  rv = destDir->GetParent(getter_AddRefs(destParentDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsAutoString destLeafName;
-  rv = destDir->GetLeafName(destLeafName);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  bool destDirExists = false;
-  destDir->Exists(&destDirExists);
-  nsCOMPtr<nsIFile> tmpDir;
-  if (destDirExists) {
-    // The destination directory exists. When we are migrating an old
-    // Tor Browser profile, we expect this to be the case because we first
-    // allow the standard Mozilla startup code to create a new profile as
-    // usual, and then later (here) we set aside that profile directory and
-    // replace it with the old Tor Browser profile that we need to migrate.
-    // For now, move the Mozilla profile directory aside and set tmpDir to
-    // point to its new, temporary location in case migration fails and we
-    // need to restore the profile that was created by the Mozilla code.
-    nsAutoString tmpName(NS_LITERAL_STRING("tmp"));
-    rv = destDir->RenameTo(nullptr, tmpName);
-    NS_ENSURE_SUCCESS(rv, rv);
-    nsCOMPtr<nsIFile> dir;
-    rv = destParentDir->Clone(getter_AddRefs(dir));
-    NS_ENSURE_SUCCESS(rv, rv);
-    rv = dir->Append(tmpName);
-    NS_ENSURE_SUCCESS(rv, rv);
-    tmpDir = dir;
-  }
-
-  // Move the old directory to the new location using MoveTo() so that
-  // timestamps are preserved (MoveTo() is atomic as long as the source and
-  // destination are on the same volume).
-  rv = srcDir->MoveTo(destParentDir, destLeafName);
-  if (NS_FAILED(rv)) {
-    // The move failed. Restore the directory that we were trying to replace.
-    if (tmpDir)
-      tmpDir->RenameTo(nullptr, destLeafName);
-    return rv;
-  }
-
-  // Success. If we set aside a directory earlier by renaming it, remove it.
-  if (tmpDir)
-    tmpDir->Remove(true);
-
-  return NS_OK;
-}
-
-static nsresult
-deleteFile(nsIFile *aParentDir, const nsACString &aRelativePath)
-{
-  NS_ENSURE_ARG_POINTER(aParentDir);
-
-  nsCOMPtr<nsIFile> file;
-  nsresult rv = aParentDir->Clone(getter_AddRefs(file));
-  NS_ENSURE_SUCCESS(rv, rv);
-  if (!aRelativePath.IsEmpty()) {
-    rv = file->AppendRelativeNativePath(aRelativePath);
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-  return file->Remove(false);
-}
-
-// When this function is called, aProfile is a brand new profile and
-// aAppDir is the directory that contains the firefox executable.
-// Our strategy is to check if an old "in application" profile exists at
-// <AppRootDir>/TorBrowser/Data/Browser/profile.default. If so, we set
-// aside the new profile directory and replace it with the old one.
-// We use a similar approach for the Tor data and UpdateInfo directories.
-static nsresult
-migrateInAppTorBrowserProfile(nsIToolkitProfile *aProfile, nsIFile *aAppDir)
-{
-  NS_ENSURE_ARG_POINTER(aProfile);
-  NS_ENSURE_ARG_POINTER(aAppDir);
-
-  nsCOMPtr<nsIFile> appRootDir;
-  nsresult rv = GetAppRootDir(aAppDir, getter_AddRefs(appRootDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // Create an nsIFile for the old <AppRootDir>/TorBrowser directory.
-  nsCOMPtr<nsIFile> oldTorBrowserDir;
-  rv = appRootDir->Clone(getter_AddRefs(oldTorBrowserDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-  rv = oldTorBrowserDir->AppendRelativeNativePath(
-                                        NS_LITERAL_CSTRING("TorBrowser"));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // Get an nsIFile for the TorBrowser-Data directory.
-  nsCOMPtr<nsIFile> newTBDataDir;
-  nsXREDirProvider* dirProvider = nsXREDirProvider::GetSingleton();
-  if (!dirProvider)
-    return NS_ERROR_UNEXPECTED;
-  rv = dirProvider->GetTorBrowserUserDataDir(getter_AddRefs(newTBDataDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // Try to migrate the browser profile. If this fails, we return an error
-  // code and we do not try to migrate any other data.
-  nsCOMPtr<nsIFile> newProfileDir;
-  rv = aProfile->GetRootDir(getter_AddRefs(newProfileDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-  nsAutoCString path(NS_LITERAL_CSTRING("Data" XPCOM_FILE_PATH_SEPARATOR
-                    "Browser" XPCOM_FILE_PATH_SEPARATOR "profile.default"));
-  rv = migrateOneTorBrowserDataDir(oldTorBrowserDir, path,
-                                   newProfileDir, NS_LITERAL_CSTRING(""));
-  NS_ENSURE_SUCCESS(rv, rv);  // Return immediately upon failure.
-
-  // Try to migrate the Tor data directory but do not return upon failure.
-  nsAutoCString torDataDirPath(NS_LITERAL_CSTRING("Data"
-                                        XPCOM_FILE_PATH_SEPARATOR "Tor"));
-  rv = migrateOneTorBrowserDataDir(oldTorBrowserDir, torDataDirPath,
-                                   newTBDataDir, NS_LITERAL_CSTRING("Tor"));
-  if (NS_SUCCEEDED(rv)) {
-    // Make a "best effort" attempt to remove the Tor data files that should
-    // no longer be stored in the Tor user data directory (they have been
-    // relocated to a read-only Tor directory, e.g.,
-    // TorBrowser.app/Contents/Resources/TorBrowser/Tor.
-    deleteFile(newTBDataDir,
-         NS_LITERAL_CSTRING("Tor" XPCOM_FILE_PATH_SEPARATOR "geoip"));
-    deleteFile(newTBDataDir,
-         NS_LITERAL_CSTRING("Tor" XPCOM_FILE_PATH_SEPARATOR "geoip6"));
-    deleteFile(newTBDataDir,
-         NS_LITERAL_CSTRING("Tor" XPCOM_FILE_PATH_SEPARATOR "torrc-defaults"));
-  }
-
-  // Try to migrate the UpdateInfo directory.
-  nsCOMPtr<nsIFile> newUpdateInfoDir;
-  nsresult rv2 = dirProvider->GetUpdateRootDir(
-                                            getter_AddRefs(newUpdateInfoDir));
-  if (NS_SUCCEEDED(rv2)) {
-    nsAutoCString updateInfoPath(NS_LITERAL_CSTRING("UpdateInfo"));
-    rv2 = migrateOneTorBrowserDataDir(oldTorBrowserDir, updateInfoPath,
-                                      newUpdateInfoDir, NS_LITERAL_CSTRING(""));
-  }
-
-  // If all pieces of the migration succeeded, remove the old TorBrowser
-  // directory.
-  if (NS_SUCCEEDED(rv) && NS_SUCCEEDED(rv2)) {
-    oldTorBrowserDir->Remove(true);
-  }
-
-  return NS_OK;
-}
-#endif
-
 static bool gDoMigration = false;
 static bool gDoProfileReset = false;
 
@@ -2711,8 +2287,7 @@ static bool gDoProfileReset = false;
 // 5) if there are *no* profiles, set up profile-migration
 // 6) display the profile-manager UI
 static nsresult
-SelectProfile(nsIProfileLock* *aResult, nsIToolkitProfileService* aProfileSvc,
-              nsIFile *aAppDir, nsINativeAppSupport* aNative,
+SelectProfile(nsIProfileLock* *aResult, nsIToolkitProfileService* aProfileSvc, nsINativeAppSupport* aNative,
               bool* aStartOffline, nsACString* aProfileName)
 {
   StartupTimeline::Record(StartupTimeline::SELECT_PROFILE);
@@ -2756,30 +2331,7 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
   }
 
   nsCOMPtr<nsIFile> lf = GetFileFromEnv("XRE_PROFILE_PATH");
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-  // If we are transitioning away from an embedded profile, ignore the
-  // XRE_PROFILE_PATH value if it matches the old default profile location.
-  // This ensures that a new default profile will be created immediately
-  // after applying an update and that our migration code will then be
-  // executed.
   if (lf) {
-    nsCOMPtr<nsIFile> oldTorProfileDir;
-    nsresult rv = GetAppRootDir(aAppDir, getter_AddRefs(oldTorProfileDir));
-    NS_ENSURE_SUCCESS(rv, rv);
-    rv = oldTorProfileDir->AppendRelativeNativePath(
-                     NS_LITERAL_CSTRING("TorBrowser" XPCOM_FILE_PATH_SEPARATOR
-                     "Data" XPCOM_FILE_PATH_SEPARATOR
-                     "Browser" XPCOM_FILE_PATH_SEPARATOR "profile.default"));
-    NS_ENSURE_SUCCESS(rv, rv);
-    bool isOldProfile = false;
-    rv = lf->Equals(oldTorProfileDir, &isOldProfile);
-    NS_ENSURE_SUCCESS(rv, rv);
-    if (isOldProfile)
-      lf = nullptr; // Ignore this XRE_PROFILE_PATH value.
-  }
-#endif
-
-  if (lf) {
     nsCOMPtr<nsIFile> localDir =
       GetFileFromEnv("XRE_PROFILE_LOCAL_PATH");
     if (!localDir) {
@@ -2858,18 +2410,13 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
         NS_ENSURE_SUCCESS(rv, rv);
     }
 
-    ProfileStatus status = CheckProfileWriteAccess(lf);
-    if (PROFILE_STATUS_OK != status)
-      return ProfileErrorDialog(lf, lf, status, nullptr, aNative, aResult);
-
     // If a profile path is specified directory on the command line, then
     // assume that the temp directory is the same as the given directory.
     rv = NS_LockProfilePath(lf, lf, getter_AddRefs(unlocker), aResult);
     if (NS_SUCCEEDED(rv))
       return rv;
 
-    return ProfileErrorDialog(lf, lf, PROFILE_STATUS_IS_LOCKED, unlocker,
-                              aNative, aResult);
+    return ProfileLockedDialog(lf, lf, unlocker, aNative, aResult);
   }
 
   ar = CheckArg("createprofile", true, &arg);
@@ -2954,10 +2501,6 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
         gDoProfileReset = false;
       }
 
-      ProfileStatus status = CheckProfileWriteAccess(profile);
-      if (PROFILE_STATUS_OK != status)
-        return ProfileErrorDialog(profile, status, nullptr, aNative, aResult);
-
       nsCOMPtr<nsIProfileUnlocker> unlocker;
       rv = profile->Lock(getter_AddRefs(unlocker), aResult);
       if (NS_SUCCEEDED(rv)) {
@@ -2966,8 +2509,7 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
         return NS_OK;
       }
 
-      return ProfileErrorDialog(profile, PROFILE_STATUS_IS_LOCKED, unlocker,
-                                aNative, aResult);
+      return ProfileLockedDialog(profile, unlocker, aNative, aResult);
     }
 
     if (CanShowProfileManager()) {
@@ -3016,20 +2558,6 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
       aProfileSvc->SetDefaultProfile(profile);
 #endif
       aProfileSvc->Flush();
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-      // Handle migration from an older version of Tor Browser in which the
-      // user data was stored inside the application directory.
-      rv = migrateInAppTorBrowserProfile(profile, aAppDir);
-      if (!NS_SUCCEEDED(rv)) {
-        // Display an error alert and continue startup. Since XPCOM was
-        // initialized in a limited way inside ProfileErrorDialog() and
-        // because it cannot be reinitialized, use LaunchChild() to start
-        // the browser.
-        ProfileErrorDialog(profile, PROFILE_STATUS_MIGRATION_FAILED, nullptr,
-                           aNative, aResult);
-        return LaunchChild(aNative);
-      }
-#endif
       rv = profile->Lock(nullptr, aResult);
       if (NS_SUCCEEDED(rv)) {
         if (aProfileName)
@@ -3061,8 +2589,7 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
           nsCOMPtr<nsIProfileUnlocker> unlocker;
           rv = profile->Lock(getter_AddRefs(unlocker), &tempProfileLock);
           if (NS_FAILED(rv))
-            return ProfileErrorDialog(profile, PROFILE_STATUS_IS_LOCKED,
-                                      unlocker, aNative, &tempProfileLock);
+            return ProfileLockedDialog(profile, unlocker, aNative, &tempProfileLock);
         }
 
         nsCOMPtr<nsIToolkitProfile> newProfile;
@@ -3073,10 +2600,6 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
           gDoProfileReset = false;
       }
 
-      ProfileStatus status = CheckProfileWriteAccess(profile);
-      if (PROFILE_STATUS_OK != status)
-        return ProfileErrorDialog(profile, status, nullptr, aNative, aResult);
-
       // If you close Firefox and very quickly reopen it, the old Firefox may
       // still be closing down. Rather than immediately showing the
       // "Firefox is running but is not responding" message, we spend a few
@@ -3102,8 +2625,7 @@ SelectProfile(nsIProfileLock* *aResult, nsIToolkitProf
         PR_Sleep(kLockRetrySleepMS);
       } while (TimeStamp::Now() - start < TimeDuration::FromSeconds(kLockRetrySeconds));
 
-      return ProfileErrorDialog(profile, PROFILE_STATUS_IS_LOCKED, unlocker,
-                                aNative, aResult);
+      return ProfileLockedDialog(profile, unlocker, aNative, aResult);
     }
   }
 
@@ -3601,14 +3123,6 @@ XREMain::XRE_mainInit(bool* aExitFlag)
     NS_BREAK();
 #endif
 
-#if defined(XP_MACOSX) && defined(TOR_BROWSER_DATA_OUTSIDE_APP_DIR)
-  bool hideDockIcon = (CheckArg("invisible") == ARG_FOUND);
-  if (hideDockIcon) {
-    ProcessSerialNumber psn = { 0, kCurrentProcess };
-    TransformProcessType(&psn, kProcessTransformToBackgroundApplication);
-  }
-#endif
-
 #ifdef USE_GLX_TEST
   // bug 639842 - it's very important to fire this process BEFORE we set up
   // error handling. indeed, this process is expected to be crashy, and we
@@ -3911,12 +3425,6 @@ XREMain::XRE_mainInit(bool* aExitFlag)
                                                    NS_LITERAL_CSTRING("0"));
 #endif
 
-  // In Tor Browser, remoting is disabled by default unless -osint is used.
-  bool allowRemote = (CheckArg("allow-remote") == ARG_FOUND);
-  if (!allowRemote && (CheckArg("osint", false, nullptr, false) != ARG_FOUND)) {
-    SaveToEnv("MOZ_NO_REMOTE=1");
-  }
-
   // Handle --no-remote and --new-instance command line arguments. Setup
   // the environment to better accommodate other components and various
   // restart scenarios.
@@ -3924,9 +3432,8 @@ XREMain::XRE_mainInit(bool* aExitFlag)
   if (ar == ARG_BAD) {
     PR_fprintf(PR_STDERR, "Error: argument --no-remote is invalid when argument --osint is specified\n");
     return 1;
-  } else if ((ar == ARG_FOUND) && allowRemote) {
-    PR_fprintf(PR_STDERR, "Error: argument --no-remote is invalid when argument --allow-remote is specified\n");
-    return 1;
+  } else if (ar == ARG_FOUND) {
+    SaveToEnv("MOZ_NO_REMOTE=1");
   }
 
   ar = CheckArg("new-instance", true);
@@ -4347,20 +3854,12 @@ XREMain::XRE_mainStartup(bool* aExitFlag)
   NS_ENSURE_SUCCESS(rv, 1);
   rv = exeFile->GetParent(getter_AddRefs(exeDir));
   NS_ENSURE_SUCCESS(rv, 1);
-#ifdef TOR_BROWSER_UPDATE
-  nsAutoCString compatVersion(TOR_BROWSER_VERSION);
-#endif
   ProcessUpdates(mDirProvider.GetGREDir(),
                  exeDir,
                  updRoot,
                  gRestartArgc,
                  gRestartArgv,
-#ifdef TOR_BROWSER_UPDATE
-                 compatVersion.get()
-#else
-                 mAppData->version
-#endif
-                 );
+                 mAppData->version);
   if (EnvHasValue("MOZ_TEST_PROCESS_UPDATES")) {
     SaveToEnv("MOZ_TEST_PROCESS_UPDATES=");
     *aExitFlag = true;
@@ -4369,22 +3868,6 @@ XREMain::XRE_mainStartup(bool* aExitFlag)
 #endif
 
   rv = NS_NewToolkitProfileService(getter_AddRefs(mProfileSvc));
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-  if (NS_FAILED(rv)) {
-    // NS_NewToolkitProfileService() returns a generic NS_ERROR_FAILURE error
-    // if creation of the TorBrowser-Data directory fails due to access denied
-    // or because of a read-only disk volume. Do an extra check here to detect
-    // these errors so we can display an informative error message.
-    ProfileStatus status = CheckTorBrowserDataWriteAccess(exeDir);
-    if ((PROFILE_STATUS_ACCESS_DENIED == status) ||
-        (PROFILE_STATUS_READ_ONLY == status)) {
-      ProfileErrorDialog(nullptr, nullptr, status, nullptr, mNativeApp,
-                        nullptr);
-      return 1;
-    }
-  }
-#endif
-
   if (rv == NS_ERROR_FILE_ACCESS_DENIED) {
     PR_fprintf(PR_STDERR, "Error: Access was denied while trying to open files in " \
                 "your profile directory.\n");
@@ -4395,8 +3878,8 @@ XREMain::XRE_mainStartup(bool* aExitFlag)
     return 1;
   }
 
-  rv = SelectProfile(getter_AddRefs(mProfileLock), mProfileSvc, exeDir,
-                     mNativeApp, &mStartOffline, &mProfileName);
+  rv = SelectProfile(getter_AddRefs(mProfileLock), mProfileSvc, mNativeApp, &mStartOffline,
+                      &mProfileName);
   if (rv == NS_ERROR_LAUNCHED_CHILD_PROCESS ||
       rv == NS_ERROR_ABORT) {
     *aExitFlag = true;
@@ -4667,8 +4150,6 @@ XREMain::XRE_mainRun()
 
   mDirProvider.DoStartup();
 
-  OverrideDefaultLocaleIfNeeded();
-
 #ifdef MOZ_CRASHREPORTER
   nsCString userAgentLocale;
   // Try a localized string first. This pref is always a localized string in
@@ -5361,16 +4842,4 @@ SetupErrorHandling(const char* progname)
 
   // Unbuffer stdout, needed for tinderbox tests.
   setbuf(stdout, 0);
-}
-
-void
-OverrideDefaultLocaleIfNeeded() {
-  // Read pref to decide whether to override default locale with US English.
-  if (mozilla::Preferences::GetBool("javascript.use_us_english_locale", false)) {
-    // Set the application-wide C-locale. Needed to resist fingerprinting
-    // of Date.toLocaleFormat(). We use the locale to "C.UTF-8" if possible,
-    // to avoid interfering with non-ASCII keyboard input on some Linux desktops.
-    // Otherwise fall back to the "C" locale, which is available on all platforms.
-    setlocale(LC_ALL, "C.UTF-8") || setlocale(LC_ALL, "C");
-  }
 }
